1
00:00:00,360 --> 00:00:07,640
[Welcome to this tutorial on building the game, Gnome's Well That Ends Well with Unity.]

2
00:00:07,700 --> 00:00:15,100
[We made this game with the help of the book, Mobile Game Development with Unity by The Secret Lab. ]

3
00:00:15,180 --> 00:00:21,140
[And in this video, we'll walk you through how the game comes together.]

4
00:00:23,340 --> 00:00:28,140
[But before we begin, here's a quick look at the final game.]

5
00:00:28,200 --> 00:00:32,560
[You control a gnome lowered into a well with a rope.]

6
00:00:32,619 --> 00:00:43,900
[Tilt your device to swing, avoid drops, grab the treasure, and climb back to the top to win.]

7
00:00:46,100 --> 00:00:51,160
[So now let's move on to game overview and architecture.]

8
00:00:52,240 --> 00:00:56,000
[The game is built around three main systems.]

9
00:00:56,060 --> 00:00:59,200
[First is the gnome.]

10
00:00:59,220 --> 00:01:04,300
[The gnome is a ragdoll made of physics parts connected by joints. ]

11
00:01:07,000 --> 00:01:10,000
[Next, we have the rope. ]

12
00:01:10,500 --> 00:01:15,500
[The rope is dynamically generated links that can lengthen, or shorten]

13
00:01:18,500 --> 00:01:27,000
[And last, the game manager. Which resets the game, handle scoring and decides win or lose condition]

14
00:01:30,700 --> 00:01:33,800
[So let's down breakdown some of the core mechanics]

15
00:01:35,000 --> 00:01:42,500
[Rope physics. The rope is made of multiple rigidbodies connected by hinge joints]

16
00:01:44,000 --> 00:01:50,500
[At run time, new links are added or removed to extend or shorten the rope]

17
00:01:51,500 --> 00:01:54,000
[Controlled by up and down button]

18
00:01:57,000 --> 00:02:02,500
[For collisions and traps, we used a reusable signal on touch script]

19
00:02:03,000 --> 00:02:14,000
[And any object tag layer, which is the gnome in this project that collides with unity event]

20
00:02:15,000 --> 00:02:24,200
[For traps, it calls GameManager.TrapTouched. For tressure, it calls TressureCollected ]

21
00:02:25,000 --> 00:02:27,000
[For the exit, it calls exit switch ]

22
00:02:27,500 --> 00:02:34,000
[For the scoring and objectives, collecting treasure swaps the gnome sprite]

23
00:02:34,500 --> 00:02:38,000
[So he looks like he's carrying it]

24
00:02:38,500 --> 00:02:43,000
[And reaching the exit while holding treasure triggers a win state]

25
00:02:46,000 --> 00:02:52,000
[For the UI and controls, the gnome moves left and right by reading tilt input]

26
00:02:53,000 --> 00:02:59,000
[The on-screen buttons control the rope length and there's also a pause button]

27
00:03:02,300 --> 00:03:06,000
[Now, let's move on to the assets and folder structure]

28
00:03:06,500 --> 00:03:15,000
[Assets are organized into folders, like sprites, refabs, scripts, and many more]

29
00:03:16,000 --> 00:03:19,000
[First, let's talk about sprites]

30
00:03:20,000 --> 00:03:26,000
[Sprites are the 2D images that represents visual elements in the game]

31
00:03:26,500 --> 00:03:39,500
[In this project, the gnome's body parts. Traps like spikes, treasure icons and background images of the well are all stored as sprites]

32
00:03:42,000 --> 00:03:44,000
[So why is it important?]

33
00:03:45,500 --> 00:03:52,000
[Sprites are important because they are the building block of the gnome's look and feel]

34
00:03:53,000 --> 00:03:59,000
[Without them, everything would just be invisible colliders and physical objects]

35
00:04:01,000 --> 00:04:03,000
[Let's move on to Prefabs]

36
00:04:04,000 --> 00:04:12,000
[Prefabs are saved templates of game objects with components, scripts and properties]

37
00:04:12,500 --> 00:04:15,500
[You can reuse them multiple times in the game]

38
00:04:18,000 --> 00:04:28,000
[So in this project, the gnome, each rope link entraps like spikes or saw blades are Prefabs]

39
00:04:29,500 --> 00:04:32,000
[So why Prefabs are important?]

40
00:04:33,000 --> 00:04:41,000
[Instead of setting up the same trap or rope link from scratch each time, you just drag in the prefab]

41
00:04:42,000 --> 00:04:46,000
[And unity ensures all copies behave the same way]

42
00:04:48,000 --> 00:04:51,000
[Let's move on now to scripts]

43
00:04:52,000 --> 00:04:58,000
[Scripts in unity are c# code files attached to game objects to control the behavior]

44
00:04:59,000 --> 00:05:07,300
[In this project, we have rope scripts which handles generating and extending the rope lengths]

45
00:05:08,000 --> 00:05:15,000
[We have collision scripts which detects when the gnome hits traps or treasure]

46
00:05:15,500 --> 00:05:22,000
[We have the input scripts, which reads tilt controls and button presses]

47
00:05:23,000 --> 00:05:32,000
[And last, we have game manager scripts that keeps track of scoring, restarting or win or lose logic]

48
00:05:33,000 --> 00:05:42,000
[Scripts bring the game to life. So without them, sprites and prefabs would just sit still]

49
00:05:43,000 --> 00:05:46,000
[And now, let's move on to the scenes]

50
00:05:48,000 --> 00:05:52,000
[Scenes are separate levels or screens in unity]

51
00:05:53,000 --> 00:06:00,000
[Each scenes contains it's own collection of game objects, UI, and settings]

52
00:06:02,000 --> 00:06:13,000
[In this project, we have the main scene which is the actual gameplay for gnome rope, traps and treasure exist]

53
00:06:14,700 --> 00:06:17,000
[So why is it important?]

54
00:06:17,500 --> 00:06:23,000
[Because scenes let's you organize the flow of the game]

55
00:06:24,500 --> 00:06:36,000
[So now, after we know the assets and folder structure, let's now move on to building and running]

56
00:06:37,000 --> 00:6:47,000
[To build and run, go to file tab, choose build profile and navigate to android platform]

57
00:6:49,000 --> 00:06:54,000
[Scroll down and choose your device in run device]

58
00:06:54,000 --> 00:06:58,000
[Make sure your android phone is plugged-in to your computer]

59
00:06:58,000 --> 00:07:08,000
[And make sure to enable developers option, USB debugging, install via USB OR USB Tethering]

60
00:07:10,000 --> 00:07:16,000
[Also make sure to download Unity remote on playstore on your android device]

61
00:07:20,000 --> 00:07:25,000
[Once you prepared all of that, we can now move to the next step]

62
00:07:25,000 --> 00:07:35,000
[Make sure your device is plugged-in to the computer and choose your device and click build and run ]

63
00:07:38,000 --> 00:07:49,000
[You have two options but in this video we will just do the unity remove in your device]

64
00:07:52,000 --> 00:07:59,000
[Because you can test the game in the unity editor or with unity remote in your device]

65
00:08:02,000 --> 00:08:15,000
[After that, press the play button and wait until the loading finish and it will run the application automatically]

66
00:08:16,000 --> 00:08:18,000
[And now it works]

67
00:08:21,000 --> 00:08:25,000
[You can now play the game on your android device]

68
00:08:27,000 --> 00:08:33,000
[For the gnome issues and improvements, a few limitations remain]

69
00:08:34,000 --> 00:08:37,000
[Rope physics can feel heavy or unstable]

70
00:08:39,000 --> 00:08:45,000
[The game has only one level and adding more wells would expand replayability]

71
00:08:46,000 --> 00:08:50,000
[Better animations and sound make seem make it more polish]

72
00:08:52,000 --> 00:08:56,000
[Multiplayer or leaderboards could be fun in future upgrades]

73
00:09:02,000 --> 00:09:07,000
[And thats it you know how to build Gnomes well that ends well in Unity]

74
00:09:08,000 --> 00:09:16,000
[From rope physics, traps , treasure up to building the game to your device]

75
00:09:18,000 --> 00:09:22,000
[And you can download this game and try on your own device too]

76
00:09:24,000 --> 00:09:31,000
[Just copy and paste the link that is displayed in this video]

77
00:09:33,000 --> 00:09:38,000
[Thank you for watching and happy game developing]

